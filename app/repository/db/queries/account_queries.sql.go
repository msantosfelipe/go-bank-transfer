// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: account_queries.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countAccountByCpf = `-- name: CountAccountByCpf :one
SELECT count(1) 
FROM accounts a 
WHERE a.cpf = $1
`

func (q *Queries) CountAccountByCpf(ctx context.Context, cpf string) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountByCpf, cpf)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(id, name, cpf)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateAccountParams struct {
	ID   uuid.UUID
	Name string
	Cpf  string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.ID, arg.Name, arg.Cpf)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT a.id, a.name, a.cpf, a.balance, a.created_at, l.secret
FROM accounts a
INNER JOIN logins l ON a.cpf = l.cpf
`

type GetAccountsRow struct {
	ID        uuid.UUID
	Name      string
	Cpf       string
	Balance   int64
	CreatedAt time.Time
	Secret    string
}

func (q *Queries) GetAccounts(ctx context.Context) ([]GetAccountsRow, error) {
	rows, err := q.db.Query(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsRow
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cpf,
			&i.Balance,
			&i.CreatedAt,
			&i.Secret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsBalances = `-- name: GetAccountsBalances :many
SELECT a.id, a.balance
FROM accounts a
WHERE a.id = ANY($1::uuid[])
`

type GetAccountsBalancesRow struct {
	ID      uuid.UUID
	Balance int64
}

func (q *Queries) GetAccountsBalances(ctx context.Context, dollar_1 []uuid.UUID) ([]GetAccountsBalancesRow, error) {
	rows, err := q.db.Query(ctx, getAccountsBalances, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsBalancesRow
	for rows.Next() {
		var i GetAccountsBalancesRow
		if err := rows.Scan(&i.ID, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts a
SET balance = $2
WHERE a.id = $1
`

type UpdateAccountBalanceParams struct {
	ID      uuid.UUID
	Balance int64
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, updateAccountBalance, arg.ID, arg.Balance)
	return err
}
